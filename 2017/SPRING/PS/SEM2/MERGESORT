using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MergeSort
{
    class Program
    {
        static int[] temporaryArray;

        static int iter;

        static void Merge(int[] array, int start, int middle, int end)
        {
            var leftPtr = start;
            var rightPtr = middle + 1;
            var length = end - start + 1;
            for (int i = 0; i < length; i++)
            {
                iter++;
                if (rightPtr > end || (leftPtr <= middle && array[leftPtr] < array[rightPtr]))
                {
                    temporaryArray[i] = array[leftPtr];
                    leftPtr++;
                }
                else
                {
                    temporaryArray[i] = array[rightPtr];
                    rightPtr++;
                }
            }
            for (int i = 0; i < length; i++)
            {
                iter++;
                array[i + start] = temporaryArray[i];
            }
                
        }

        static void MergeSort(int[] array, int start, int end)
        {
            if (start == end) return;
            var middle = (start + end) / 2;
            MergeSort(array, start, middle);
            MergeSort(array, middle + 1, end);
            Merge(array, start, middle, end);

        }

        static void MergeSort(int[] array)
        {
            iter = 0;
            temporaryArray = new int[array.Length];
            MergeSort(array, 0, array.Length - 1);
        }

        public static void Main()
        {
            var list = new List<string>();
            var arr = File.ReadAllLines("1000.txt")
                .Select(x => Convert.ToInt32(x)).ToArray();
            MergeSort(arr);
        }

        public double CheckTime(int[] arr)
        {
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();
            MergeSort(arr);
            stopWatch.Stop();
            return stopWatch.Elapsed.TotalMilliseconds;
        }

        public int CheckIterations(int[] arr)
        {
            MergeSort(arr);
            return iter;    
        }
    }

    class Helper
    {
        public void Generate()
        {
            var rnd = new Random();
            for (int i = 100; i <= 10000; i += 100)
            {
                var list = new List<string>();
                for (int j = 0; j < i; j++)
                {
                    list.Add(rnd.Next().ToString());
                }
                File.WriteAllLines(i.ToString() + ".txt", list.ToArray());
            }
        }
    }
}
